# -><- coding: utf-8 -*-
# 23/07/2022


import os
import argparse

from configuration import conf_dict
from parse_component_log import get_component_info
from util import _read_json, logger_cof, get_file_list, init_logger, write_log, stop_logger
from parse_analy_report import deal_report
from parse_regrawdata import deal_regrawdata

# *  according to the input args_input、args_path and args_cpu, to use parse_logs() to generate the corresponding converted JSON file.
#         @param - args_input: The single ErrorAnalyReport.json.
#         @param - args_path: The path for ErrorAnalyReport.json files, it will analyze all files in the path.
#         @param - args_cpu: Indicate the cpu type(icx, cpx) of the input file.
#         return - error_list: All error messages generated by running the parse_log() function.
def convert(args_input, args_path, args_cpu):
    init_logger()
    write_log("------start------")
    error_list = []
    prefix_system_name_list = []
    if args_input:
        report_filename = args_input
        error_list = parse_logs(report_filename, args_cpu)
    elif args_path:
        # parent is the current directory, dirnames is all subdirectly under the current directory,
        # filenames is all files in the current directory.
        for name in os.listdir(args_path):
            flag = False
            filename = os.path.join(args_path, name)
            if os.path.isfile(filename):
                if filename.endswith("ErrorAnalyReport.json"):
                    prefix_system_name = filename.replace("ErrorAnalyReport.json", "")
                    flag = True
                elif filename.endswith("RegRawData.json"):
                    prefix_system_name = filename.replace("RegRawData.json", "")
                    flag = True
                if flag:
                    prefix_system_name_list.append(prefix_system_name)
        prefix_system_name_list = list(set(prefix_system_name_list))
        for system in prefix_system_name_list:
            report_filename = system+"ErrorAnalyReport.json"
            error_list.extend(parse_logs(report_filename, args_cpu))
        # for parent, dirnames, filenames in os.walk(args_path):
        #     for filename in filenames:
        #         flag = False
        #         if filename.endswith("ErrorAnalyReport.json"):
        #             prefix_system_name = filename.replace("ErrorAnalyReport.json", "")
        #             flag = True
        #         elif filename.endswith("RegRawData.json"):
        #             prefix_system_name = filename.replace("RegRawData.json", "")
        #             flag = True
        #         if flag:
        #             prefix_system_name_list.append(prefix_system_name)
        #
        # prefix_system_name_list = list(set(prefix_system_name_list))
        #
        # for system in prefix_system_name_list:
        #     report_filename = os.path.join(parent,system+"ErrorAnalyReport.json")
        #     error_list.extend(parse_logs(report_filename, args_cpu))

    write_log("convert error count: " + str(len(error_list)))
    print("convert error count: ", len(error_list))
    if error_list:
        print(error_list)
    write_log("------end------")
    stop_logger()
    return error_list

#  according to the input report_filename, deal the corresponding component.log、
#  ErrorAnalyReport.json and RegRawData.json files, generate the corresponding converted JSON file.
#         @param - report_filename: The single ErrorAnalyReport.json.
#         @param - args_cpu: Indicate the cpu type(icx, cpx) of the input file.
#         return - error_list: All error messages generated by convert the corresponding component.log、 ErrorAnalyReport.json and RegRawData.json file.
def parse_logs(report_filename, args_cpu):
    # conf_json, error_list = _read_json("configuration.py")
    error_list = []
    rawdata_filename = report_filename.replace("ErrorAnalyReport.json", "RegRawData.json")
    log_filename = report_filename.replace("ErrorAnalyReport.json", "component.log")
    log_cputype_re = conf_dict["log_cputype_re"]
    raw_cputype_re = conf_dict["raw_cputype_re"]
    #logger = logger_cof("onekeylog.log")
    news = ("##### Start to convert "+report_filename)
    write_log(news)
    print("##### Start to convert ", report_filename)
    all_list = []
    try:
        component_info, error_list1 = get_component_info(log_filename, rawdata_filename, log_cputype_re, raw_cputype_re, args_cpu)
        if component_info == {}:
            return error_list1
    except Exception as e:
        error_list.append((os.path.basename(report_filename), e.args[0]))
        return error_list
    all_list, error_list2 = deal_report(report_filename, component_info)
    error_list3 = deal_regrawdata(rawdata_filename, component_info, all_list)
    error_list = error_list + error_list1 + error_list2 + error_list3
    return error_list

version = "V1.0"
# The main function entry
if __name__ == "__main__":
#    logger = logger_cof("onekeylog.log")
#    logger.debug("-----------------------------------------------------start create a new log !-----------------------------------------------------")

    # parser = argparse.ArgumentParser()
    # parser.add_argument("-i", "--input", help="The single RegAnalyReport.json.")
    # parser.add_argument("-p", "--path", help="The path for RegAnalyReport.json files, it will analyze all files in the path.")
    # parser.add_argument("-c", "--cpu", help="Indicate the cpu type(icx, cpx) of the input file")
    # parser.add_argument("-v", "--version", help="Indicate the version number of this code")
    # args = parser.parse_args()
    # if args.version:
    #     print(version)
    # if not args.input and not args.path:
    #     raise SystemExit("Need argument -i [file] or -p [path]")
    # convert(args.input, args.path, args.cpu)
    # print(os.path.exists(r"C:\extracted_logs\testOnekeyLog1_ErrorAnalyReport.json"))
    report_filename = r"C:\question_logs\202111_Tencent_LC21A069000BE_2022-01-08-02-16_ErrorAnalyReport.json"
    rawdata_filename = report_filename.replace("ErrorAnalyReport.json", "RegRawData.json")
    log_filename = report_filename.replace("ErrorAnalyReport.json", "component.log")
    log_cputype_re = conf_dict["log_cputype_re"]
    raw_cputype_re = conf_dict["raw_cputype_re"]
    args_cpu = None
    component_info, error_list1 = get_component_info(log_filename, rawdata_filename, log_cputype_re, raw_cputype_re,
                                                     args_cpu)
    print(report_filename)
    print(report_filename)
    all_list, error_list = deal_report(report_filename, component_info)
    print("----------------------------")
    print(type(all_list))
    print("----------------------------")
    print(all_list)

